{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"puntgun - A configurable automation command line tool for Twitter # 1 2 3 4 5 ____ _ ____ ,___|____\\____________|_|____/____|____________________ |___|_|_)_|_|_|_|_'__\\|___|_|_|___|_|_|_|_'__\\__[____] \"\"-,___..--===== | __/| |_| | | | | |_ | |_| | |_| | | | | \\\\_____/ \"\" | |_| \\__,_|_| |_|\\__| \\____|\\__,_|_| |_| [ ))\"---------..__| Warning This tool is not available yet, it will be soon! This tool was originally conceived as a configurable automatic Twitter account blocker. What could be a better name for it than the punt gun , a special hunting weapon used to kill a large number of waterfowl in one shot. But that type of gun is a huge threat to the natural environment, and fortunately this tool only inherits the meaning of its origin, even to the benefit of the social platform environment (or at least to the mental health of its users). Usage # Currently, the tool can only operate one Twitter account to perform actions, which means you can't make multiple Twitter account block same group of users at once run. Disclaimer # There always has to be such a statement (where else would I need to put it?). Hopefully our unit tests are sufficient to avoid tragedies caused by faulty logic. However, we have the cheek to state that such errors are still covered by the disclaimer, although we will still suffer from a guilty conscience and do our best to fix them if these god-forbidden things happen: Warning This tool may have unrecoverable effects on users' Twitter accounts. By using this tool, the user is aware of the dangers and agrees to take full responsibility for all consequences resulting from the use of this tool. The maintainers of this tool are not responsible for any result caused by the use of this tool. Technical details you may want to know # How it works # Essentially we make the tool a third-party application that can access the Twitter platform by registering a credential (a pair of secret token) with your Twitter account and then using your Twitter account to authorize this tool (the credential you registered from Twitter, in fact) to operate your account (for blocking users, etc.). Limitation of the Twitter Developer API # Note that as this tool's performance is depending on the complexity of configuration you set, it is also subject to the limitations of the Twitter Developer API because your api query volume is not unlimited , meanwhile the Twitter Dev API have rate limits restriction with different permissions on different endpoints . What's more, you can only search for last 7 days tweets (using \"search/recent\" API) with Essential Twitter API permission, and query string length is limited up to 512. Details about secrets encryption and usage # Currently, we use the RSA4096 with the cryptographic library Cryptography for processing secrets to prevent them being saved into configuration file in plaintext format. For implementation details, check these source codes . For Cryptography's security limitation, check this documentation . When the tool is running, the secrets will stay inside a client object of the Twitter API client library Tweepy , and it seems that they are stored as plaintext string . As we're calling this client instance all over the tool while running, I guess we can't prevent secrets from a memory dump attack or something similar.","title":"Home"},{"location":"#puntgun-a-configurable-automation-command-line-tool-for-twitter","text":"1 2 3 4 5 ____ _ ____ ,___|____\\____________|_|____/____|____________________ |___|_|_)_|_|_|_|_'__\\|___|_|_|___|_|_|_|_'__\\__[____] \"\"-,___..--===== | __/| |_| | | | | |_ | |_| | |_| | | | | \\\\_____/ \"\" | |_| \\__,_|_| |_|\\__| \\____|\\__,_|_| |_| [ ))\"---------..__| Warning This tool is not available yet, it will be soon! This tool was originally conceived as a configurable automatic Twitter account blocker. What could be a better name for it than the punt gun , a special hunting weapon used to kill a large number of waterfowl in one shot. But that type of gun is a huge threat to the natural environment, and fortunately this tool only inherits the meaning of its origin, even to the benefit of the social platform environment (or at least to the mental health of its users).","title":"puntgun - A configurable automation command line tool for Twitter"},{"location":"#usage","text":"Currently, the tool can only operate one Twitter account to perform actions, which means you can't make multiple Twitter account block same group of users at once run.","title":"Usage"},{"location":"#disclaimer","text":"There always has to be such a statement (where else would I need to put it?). Hopefully our unit tests are sufficient to avoid tragedies caused by faulty logic. However, we have the cheek to state that such errors are still covered by the disclaimer, although we will still suffer from a guilty conscience and do our best to fix them if these god-forbidden things happen: Warning This tool may have unrecoverable effects on users' Twitter accounts. By using this tool, the user is aware of the dangers and agrees to take full responsibility for all consequences resulting from the use of this tool. The maintainers of this tool are not responsible for any result caused by the use of this tool.","title":"Disclaimer"},{"location":"#technical-details-you-may-want-to-know","text":"","title":"Technical details you may want to know"},{"location":"#how-it-works","text":"Essentially we make the tool a third-party application that can access the Twitter platform by registering a credential (a pair of secret token) with your Twitter account and then using your Twitter account to authorize this tool (the credential you registered from Twitter, in fact) to operate your account (for blocking users, etc.).","title":"How it works"},{"location":"#limitation-of-the-twitter-developer-api","text":"Note that as this tool's performance is depending on the complexity of configuration you set, it is also subject to the limitations of the Twitter Developer API because your api query volume is not unlimited , meanwhile the Twitter Dev API have rate limits restriction with different permissions on different endpoints . What's more, you can only search for last 7 days tweets (using \"search/recent\" API) with Essential Twitter API permission, and query string length is limited up to 512.","title":"Limitation of the Twitter Developer API"},{"location":"#details-about-secrets-encryption-and-usage","text":"Currently, we use the RSA4096 with the cryptographic library Cryptography for processing secrets to prevent them being saved into configuration file in plaintext format. For implementation details, check these source codes . For Cryptography's security limitation, check this documentation . When the tool is running, the secrets will stay inside a client object of the Twitter API client library Tweepy , and it seems that they are stored as plaintext string . As we're calling this client instance all over the tool while running, I guess we can't prevent secrets from a memory dump attack or something similar.","title":"Details about secrets encryption and usage"},{"location":"configuration/detailed-plan-configuration/","text":"Detailed Plan Configuration # This page contains all details and cautions about plan configuration: which field is required (must be set) in one rule, what value can a field takes... If you are confused about usage of a rule, the answer is most likely written on this page of the documentation. (Can't find what you want? Ask questions to remind us to improve the documentation.) Tool Scope Concepts # Time Type Values # All the time type values user configured for the tool, generated by the tool, are taken at UTC+0 (i.e. Greenwich Mean Time Zone). (But in general you don't need to be too concerned about a few hours' deviation in filter rules setting or so.) There are three available time formats for configuration: 2022-01-01 01:01:01 -> datetime.datetime(2022, 1, 1, 1, 1, 1) 2022-01-01 -> datetime.date(2022, 1, 1) (the time part is 00:00:00 ) 2022-01-01T01:01:01Z -> datetime.datetime(2022, 1, 1, 1, 1, 1) Tips About Searching And Matching # For more information about Twitter search queries, please refer to the official documentation . Both tweet search and regular matching are simple yet powerful rules. They are extremely easy to misuse because they just match characters in text rather than the semantics of the text. For example, let's say you want to select people who hate cats and use hate cats as the keyword, but instead you get a match for I hate cockroach!!! Love cats so much \u2665\u2665\u2665\u2665 . Our advice is to carefully choose words that only your target group will say: Use short phrases that are long enough not to confuse semantics but iconic as keywords, such as campaign slogans, taglines or hashtags. Make keywords contain special words that are so highly emotional or so intensely offensive that people outside the target group won't use them. Regular Expression # Things become complicated when it comes to regular expressions. Not only do we have to understand the syntax of regular expressions (in python) , but we also have to cross the hurdle of configuration language's and Python's character escaping concepts. You can test your (configuration language escaping is not concerned) regular expression on convenient online websites, this website for example. Our advice is try not to use too complex expression, or split one rule with complex expression into multiple rules with simpler ones. User Source Rules # ids # Where to get them? Somehow you can get them from another automatic twitter processing tool. If you want to get one user's id manually, maybe you can find it in the Twitter Web Client 's XHRs via browser developer console? And there are some online websites that allows you to get the id of a user with its name, google \"Twitter user id\" and you'll find them. The type of list elements can be number or string . User Filter Rules # follower, following # At least one of less_than , more_than fields need to be set. This sounds not straightforward, but the less_than needs to be bigger than the more_than because the order of comparison is: more_than < number < less_than The equal-to-edge cases (number=less_than or number=more_then) are regard as falsy (not trigger the rule). User Action Rules # block #","title":"Detailed Plan Configuration"},{"location":"configuration/detailed-plan-configuration/#detailed-plan-configuration","text":"This page contains all details and cautions about plan configuration: which field is required (must be set) in one rule, what value can a field takes... If you are confused about usage of a rule, the answer is most likely written on this page of the documentation. (Can't find what you want? Ask questions to remind us to improve the documentation.)","title":"Detailed Plan Configuration"},{"location":"configuration/detailed-plan-configuration/#tool-scope-concepts","text":"","title":"Tool Scope Concepts"},{"location":"configuration/detailed-plan-configuration/#time-type-values","text":"All the time type values user configured for the tool, generated by the tool, are taken at UTC+0 (i.e. Greenwich Mean Time Zone). (But in general you don't need to be too concerned about a few hours' deviation in filter rules setting or so.) There are three available time formats for configuration: 2022-01-01 01:01:01 -> datetime.datetime(2022, 1, 1, 1, 1, 1) 2022-01-01 -> datetime.date(2022, 1, 1) (the time part is 00:00:00 ) 2022-01-01T01:01:01Z -> datetime.datetime(2022, 1, 1, 1, 1, 1)","title":"Time Type Values"},{"location":"configuration/detailed-plan-configuration/#tips-about-searching-and-matching","text":"For more information about Twitter search queries, please refer to the official documentation . Both tweet search and regular matching are simple yet powerful rules. They are extremely easy to misuse because they just match characters in text rather than the semantics of the text. For example, let's say you want to select people who hate cats and use hate cats as the keyword, but instead you get a match for I hate cockroach!!! Love cats so much \u2665\u2665\u2665\u2665 . Our advice is to carefully choose words that only your target group will say: Use short phrases that are long enough not to confuse semantics but iconic as keywords, such as campaign slogans, taglines or hashtags. Make keywords contain special words that are so highly emotional or so intensely offensive that people outside the target group won't use them.","title":"Tips About Searching And Matching"},{"location":"configuration/detailed-plan-configuration/#regular-expression","text":"Things become complicated when it comes to regular expressions. Not only do we have to understand the syntax of regular expressions (in python) , but we also have to cross the hurdle of configuration language's and Python's character escaping concepts. You can test your (configuration language escaping is not concerned) regular expression on convenient online websites, this website for example. Our advice is try not to use too complex expression, or split one rule with complex expression into multiple rules with simpler ones.","title":"Regular Expression"},{"location":"configuration/detailed-plan-configuration/#user-source-rules","text":"","title":"User Source Rules"},{"location":"configuration/detailed-plan-configuration/#ids","text":"Where to get them? Somehow you can get them from another automatic twitter processing tool. If you want to get one user's id manually, maybe you can find it in the Twitter Web Client 's XHRs via browser developer console? And there are some online websites that allows you to get the id of a user with its name, google \"Twitter user id\" and you'll find them. The type of list elements can be number or string .","title":"ids"},{"location":"configuration/detailed-plan-configuration/#user-filter-rules","text":"","title":"User Filter Rules"},{"location":"configuration/detailed-plan-configuration/#follower-following","text":"At least one of less_than , more_than fields need to be set. This sounds not straightforward, but the less_than needs to be bigger than the more_than because the order of comparison is: more_than < number < less_than The equal-to-edge cases (number=less_than or number=more_then) are regard as falsy (not trigger the rule).","title":"follower, following"},{"location":"configuration/detailed-plan-configuration/#user-action-rules","text":"","title":"User Action Rules"},{"location":"configuration/detailed-plan-configuration/#block","text":"","title":"block"},{"location":"configuration/plan-configuration/","text":"Plan Configuration # This page describes configurations for plan, one run of the tool - setting processing rules through the configuration file (also referred to as Plan). Some rules contain fields that worth a paragraph to explain, but if we put all the details into this single page, it will be too long. So here we just list all the available rules with a brief description, and leave the details in other corresponding pages. The example configuration is written in yaml format (you may want to learn about yaml's syntax ), but you can also use other supported formats like .toml, .ini, .json. In this page we'll use yaml format. Currently, the tool only support processing Twitter accounts (\"user_plan\") (blocking accounts for example), but we left a place for processing tweets in the future (like deleting embarrassing past tweets). How To Write A Plan # One plan contains at most three types of rules, together they construct a processing pipeline: Source rules - Where to get source candidates (Twitter accounts or tweets)? Filter rules - (optional) What type(s) of candidates should be chosen from the source to take actions? Action rules - What actions to take on candidates that trigger filter rules? One plan configuration file can contain several plans (under field plans ). We tried to make plan configuration look natural, one of the simplest is: 1 2 3 4 5 6 7 8 9 10 11 12 13 plans : # Name (explain) of this plan - user_plan : Do block on three users depend on their follower number from : # '@Alice', '@Bob' and '@Charlie' - names : [ 'Alice' , 'Bob' , 'Charlie' ] that : # who has less than 10 (0~9) followers - follower : less_than : 10 do : # block them - block The syntax structure is: 1 2 3 4 5 6 7 8 plans : [ - <plan> ] # <plan> <plan_type> : <string> from : [ <source_rule> ] that : [ <filter_rule> ] do : [ <action_rule> ] As the filter rule is optional, we can directly take action on every user in the source: 1 2 3 4 5 6 plans : - user_plan : Again from : - names : [ 'Alice' , 'Bob' , 'Charlie' ] do : - block How Plans Are Executed # Plans are executed in the order they are defined in the configuration file, one by one i.e. in parallel (so plans won't compete for limited API invocation resources). For a single plan: The source rules are executed first, results are default union together as one final set. Users in the source set are judged by a chain of filter rules, results are default ORed together, so if any filter rule is matched, that user will be considered as the target. The action rules are executed on the target set of users, in the order they are defined in the configuration file. In natural language, the summary is: Run all action_rule s on targets from any source_rule that trigger any filter_rule . You can arrange more complex but flexible execution order by nesting rule sets below. Rule Sets # Rule sets help us create a layer of abstraction by converting a \"scattered\" SET of rules of the same type into a single result. We can think of one single ruleset as a single rule of that type, so that we can write nested \"trees\" of rules with more \"dynamic\" judgment capabilities. For now, we consider that only filter rules are worth writing various (user-usable) rule sets. Rule Sets Inside Plan # In fact, plans use rule sets internally to handle the execution and judgments of the rules contained in themselves, and there are currently two plan-specific rule sets that are not directly available to users: aggregating the candidate targets generated by all source rules into a single data stream and removing duplicate candidate targets. aggregating the results of all action rules into a result set. As described in the plan execution part above, the plan also uses the any_of filter rule set to decide a final single filter result of all filter rules as a basis for determining whether to process candidate targets. any_of (filter rule set) # Logical OR: If any filtering rule is triggered, the rule set is considered to be triggered. Only if none of rules are triggered, the rule set is not triggered. all_of (filter rule set) # Logical AND: Only if all filter rules are triggered, the rule set is considered to be triggered. If any rule is not triggered, the rule set is not triggered. User Source Rules # ids # 1 2 from : - ids : [ 123456789 , 987654321 ] Specify users with a list of user id as source. Details names # 1 2 from : - names : [ 'Alice' , 'Bob' , 'Charlie' ] Specify users with a list of username (also called \"handle\" by Twitter) as source. Usernames are easy to get, so this rule is pretty good for your first try with a handful usernames. Like the user id, manually typing down or parsing amount of usernames is awkward and not recommended. User Filter Rules # follower # 1 2 3 4 5 6 that : - follower : less_than : 10 more_than : 5 - follower_less_than : 10 Follower count itself doesn't tell much, but it's good to have a rule aiming at it. The follower-less-than is a shortcut for follower: { less_than: n } . Details following # 1 2 3 4 5 6 that : - following : less_than : 10 more_than : 5 - following_more_than : 5 Correspondingly... the following number filter rule. Details created # 1 2 3 4 5 6 that : - created : before : 2022-12-01 01:01:01 after : 2022-01-01T01:01:01Z - created_after : 2022-01-01 The creation time of an account is a reflection of how much the Twitter platform trusts that user, and although the Twitter report&suspend mechanism has been unreliable, it is still working. In general, the longer the account is created, the more we \"trust\" that the user is a human rather than a bot. Details about time type values created_within_days # 1 2 that : - created_within_days : 90 Another flexible account creating time judging rule. profile_text_matches # 1 2 that : - profile_text_matches : hate It's actually check three parts of texts, ont only the profile. Check if any text below matches configured regular expression : user's name (the name you see aside the avatar, without \"@\") user's description (also the profile) pinned tweet's text Details about regular expression Make sure you've read tips about how to build a proper match . following_count_ratio # 1 2 3 4 5 6 7 8 9 that : - following_count_ratio : # 1 follower / 10 following more_than : 0.1 # 10 follower / 1 following, wow pretty famous less_than : 10 # 5 follower / 100 following - following_count_ratio_less_than : 0.05 What do you think when you see a user who has a dozen or single digit followers, but follows thousands of people? There's a good chance on just that this person only read and does not talk or interact with others often. But there is a pretty small possibility that this account is a hook or marker. When one user switches from public to protected state, the existing followers can still see the updates, this is the meaning of early following I can think of. tweet_count # 1 2 3 4 5 6 that : - tweet_count : more_than : 10 less_than : 1000 - tweet_count_less_than : 1000 Low tweet count (including retweets) means the user doesn't post much, leave a rule for it. User Action Rules # block # 1 2 do : - block : {} Block users that trigger the filter rules.","title":"Plan Configuration"},{"location":"configuration/plan-configuration/#plan-configuration","text":"This page describes configurations for plan, one run of the tool - setting processing rules through the configuration file (also referred to as Plan). Some rules contain fields that worth a paragraph to explain, but if we put all the details into this single page, it will be too long. So here we just list all the available rules with a brief description, and leave the details in other corresponding pages. The example configuration is written in yaml format (you may want to learn about yaml's syntax ), but you can also use other supported formats like .toml, .ini, .json. In this page we'll use yaml format. Currently, the tool only support processing Twitter accounts (\"user_plan\") (blocking accounts for example), but we left a place for processing tweets in the future (like deleting embarrassing past tweets).","title":"Plan Configuration"},{"location":"configuration/plan-configuration/#how-to-write-a-plan","text":"One plan contains at most three types of rules, together they construct a processing pipeline: Source rules - Where to get source candidates (Twitter accounts or tweets)? Filter rules - (optional) What type(s) of candidates should be chosen from the source to take actions? Action rules - What actions to take on candidates that trigger filter rules? One plan configuration file can contain several plans (under field plans ). We tried to make plan configuration look natural, one of the simplest is: 1 2 3 4 5 6 7 8 9 10 11 12 13 plans : # Name (explain) of this plan - user_plan : Do block on three users depend on their follower number from : # '@Alice', '@Bob' and '@Charlie' - names : [ 'Alice' , 'Bob' , 'Charlie' ] that : # who has less than 10 (0~9) followers - follower : less_than : 10 do : # block them - block The syntax structure is: 1 2 3 4 5 6 7 8 plans : [ - <plan> ] # <plan> <plan_type> : <string> from : [ <source_rule> ] that : [ <filter_rule> ] do : [ <action_rule> ] As the filter rule is optional, we can directly take action on every user in the source: 1 2 3 4 5 6 plans : - user_plan : Again from : - names : [ 'Alice' , 'Bob' , 'Charlie' ] do : - block","title":"How To Write A Plan"},{"location":"configuration/plan-configuration/#how-plans-are-executed","text":"Plans are executed in the order they are defined in the configuration file, one by one i.e. in parallel (so plans won't compete for limited API invocation resources). For a single plan: The source rules are executed first, results are default union together as one final set. Users in the source set are judged by a chain of filter rules, results are default ORed together, so if any filter rule is matched, that user will be considered as the target. The action rules are executed on the target set of users, in the order they are defined in the configuration file. In natural language, the summary is: Run all action_rule s on targets from any source_rule that trigger any filter_rule . You can arrange more complex but flexible execution order by nesting rule sets below.","title":"How Plans Are Executed"},{"location":"configuration/plan-configuration/#rule-sets","text":"Rule sets help us create a layer of abstraction by converting a \"scattered\" SET of rules of the same type into a single result. We can think of one single ruleset as a single rule of that type, so that we can write nested \"trees\" of rules with more \"dynamic\" judgment capabilities. For now, we consider that only filter rules are worth writing various (user-usable) rule sets.","title":"Rule Sets"},{"location":"configuration/plan-configuration/#rule-sets-inside-plan","text":"In fact, plans use rule sets internally to handle the execution and judgments of the rules contained in themselves, and there are currently two plan-specific rule sets that are not directly available to users: aggregating the candidate targets generated by all source rules into a single data stream and removing duplicate candidate targets. aggregating the results of all action rules into a result set. As described in the plan execution part above, the plan also uses the any_of filter rule set to decide a final single filter result of all filter rules as a basis for determining whether to process candidate targets.","title":"Rule Sets Inside Plan"},{"location":"configuration/plan-configuration/#any_of-filter-rule-set","text":"Logical OR: If any filtering rule is triggered, the rule set is considered to be triggered. Only if none of rules are triggered, the rule set is not triggered.","title":"any_of (filter rule set)"},{"location":"configuration/plan-configuration/#all_of-filter-rule-set","text":"Logical AND: Only if all filter rules are triggered, the rule set is considered to be triggered. If any rule is not triggered, the rule set is not triggered.","title":"all_of (filter rule set)"},{"location":"configuration/plan-configuration/#user-source-rules","text":"","title":"User Source Rules"},{"location":"configuration/plan-configuration/#ids","text":"1 2 from : - ids : [ 123456789 , 987654321 ] Specify users with a list of user id as source. Details","title":"ids"},{"location":"configuration/plan-configuration/#names","text":"1 2 from : - names : [ 'Alice' , 'Bob' , 'Charlie' ] Specify users with a list of username (also called \"handle\" by Twitter) as source. Usernames are easy to get, so this rule is pretty good for your first try with a handful usernames. Like the user id, manually typing down or parsing amount of usernames is awkward and not recommended.","title":"names"},{"location":"configuration/plan-configuration/#user-filter-rules","text":"","title":"User Filter Rules"},{"location":"configuration/plan-configuration/#follower","text":"1 2 3 4 5 6 that : - follower : less_than : 10 more_than : 5 - follower_less_than : 10 Follower count itself doesn't tell much, but it's good to have a rule aiming at it. The follower-less-than is a shortcut for follower: { less_than: n } . Details","title":"follower"},{"location":"configuration/plan-configuration/#following","text":"1 2 3 4 5 6 that : - following : less_than : 10 more_than : 5 - following_more_than : 5 Correspondingly... the following number filter rule. Details","title":"following"},{"location":"configuration/plan-configuration/#created","text":"1 2 3 4 5 6 that : - created : before : 2022-12-01 01:01:01 after : 2022-01-01T01:01:01Z - created_after : 2022-01-01 The creation time of an account is a reflection of how much the Twitter platform trusts that user, and although the Twitter report&suspend mechanism has been unreliable, it is still working. In general, the longer the account is created, the more we \"trust\" that the user is a human rather than a bot. Details about time type values","title":"created"},{"location":"configuration/plan-configuration/#created_within_days","text":"1 2 that : - created_within_days : 90 Another flexible account creating time judging rule.","title":"created_within_days"},{"location":"configuration/plan-configuration/#profile_text_matches","text":"1 2 that : - profile_text_matches : hate It's actually check three parts of texts, ont only the profile. Check if any text below matches configured regular expression : user's name (the name you see aside the avatar, without \"@\") user's description (also the profile) pinned tweet's text Details about regular expression Make sure you've read tips about how to build a proper match .","title":"profile_text_matches"},{"location":"configuration/plan-configuration/#following_count_ratio","text":"1 2 3 4 5 6 7 8 9 that : - following_count_ratio : # 1 follower / 10 following more_than : 0.1 # 10 follower / 1 following, wow pretty famous less_than : 10 # 5 follower / 100 following - following_count_ratio_less_than : 0.05 What do you think when you see a user who has a dozen or single digit followers, but follows thousands of people? There's a good chance on just that this person only read and does not talk or interact with others often. But there is a pretty small possibility that this account is a hook or marker. When one user switches from public to protected state, the existing followers can still see the updates, this is the meaning of early following I can think of.","title":"following_count_ratio"},{"location":"configuration/plan-configuration/#tweet_count","text":"1 2 3 4 5 6 that : - tweet_count : more_than : 10 less_than : 1000 - tweet_count_less_than : 1000 Low tweet count (including retweets) means the user doesn't post much, leave a rule for it.","title":"tweet_count"},{"location":"configuration/plan-configuration/#user-action-rules","text":"","title":"User Action Rules"},{"location":"configuration/plan-configuration/#block","text":"1 2 do : - block : {} Block users that trigger the filter rules.","title":"block"},{"location":"configuration/tool-configuration/","text":"Tool Configuration # This page is describing configurations of the tool itself. For all available plan configurations, please check the plan configuration documentation page . There are two types of tool configuration: most of them can be configured in global configuration file or set via environment variable, but some special configurations can only be passed through command line argument. The tool is using the Dynaconf as the configuration parsing library. Loading Priority (Precedence) # The tool will choose the tool configurations in the following order: Command line arguments & Environment variables[ ref ]. User written plan configuration files. Global settings file and secrets file. Default values set inside program. Setting Via Configuration File # You can use different supported formats like .yaml, .toml, .ini, .json. In this page we'll use yaml format. The name of one setting option is also the key in configuration file, and you can set an environment variable for it. Name Default Description log_level info Log level of the log file and stderr log_rotation 100MB Change log files writing method (when to split a new file) block_following false Whether to block users that you're following block_follower true Whether to block users that following you read_password_from_stdin false Instead of ask user input the password (for loading private key file) through terminal You can search how particular configuration is used in source code if you are interested. Setting Via Environment Variable # You can set the tool configurations via setting environment variables , with the prefix BULLET_ followed by upper case of the name, in which you can build automated processes. This is quite useful and simple when setting up secrets. 1 2 3 4 5 # setting in configuration file (yaml) caliber: 20 ga. # variable in environment (unix-like os style) export BULLET_CALIBER=\"20 ga.\" Setting Via Command Line Argument # There are some \"one-off\" configurations (value may be different in each execution, so not suitable for the global scope). The tool will use --secrets_file and --private_key_file to manage secrets in a safe way, here is more detailed introduction. Argument Default Description --config_path <home directory> /.puntgun Path of various configuration files the tool needs --plan_file <config path> /plan.yml Plan configuration file you'd like to execute --settings_file <config path> /settings.yml Global tool settings that will apply to every execution --private_key_file <config path> /.puntgun_rsa4096 Tool generated password protected private key --secrets_file <config path> /.secrets.yml Tool generated ciphertext or user written plain text file contains secrets --report_file <config path> /reports/ <plan_file> _ <time> _report.json Expect path of the tool generated execution report Secrets # Secrets are strings that need to be kept well, and you should treat them as you would your Twitter account's password. Anyone who has them can manipulate your Twitter account at will just like they have your password. We need four (two pairs of) secrets to make the tool work: A pair of Twitter Developer API usage credential for querying Twitter APIs, configuration name: ak & aks , stands for A pi K ey secrets pair key and key S ecrets. We'll get them from Twitter Dev Platform . An access token pair that indicate your consent for API key above to operate your account, configuration name: at & ats , stands for A ccess T oken pair key and key S ecrets. We can't get them until first run the tool. Registering A Twitter API Credential # When the tool is first launched there is an interactive guide procedure instructing you on how to register and save your credentials. If you want to register one right away, keep reading, if not, skip this paragraph. For registering a credential, first you need a Twitter account (you already have one I guess), and you need to bind a phone number with that account. You can do unbind after get the credential, and the credential will remain valid. But Twitter already saved a new line of record about your phone inside the user table, now it's up to you whether you want to continue or not. Follow the instruction below: Register the credential (\"register an app\" Twitter says so) on developer.twitter.com . Turn on \"OAuth 1.0a\" in your App settings: Set the App permissions to \"Read and write\". Set the callback, website URL to \"https://twitter.com\" for passing the website's validation check. (We'll use the pin-based auth method , so we needn't really deploy a server for receiving Twitter's callback.) All set, now you can directly paste them into the tool. You must run the tool at least once to authorize this tool with your Twitter account to get access token pair, then you can dump secrets and set all these four secrets for automatically running the tool. Let The Tool Manages Secrets # The tool will help you manage secrets by default, and interactive with you via terminal (command line interface) while running to operate them. In short, you create a new password and keep it, the password protects the <private_key_file> , the private key protects four secret values in <secrets_file> . You keep the password, let the tool arrange rest things for you. Keep reading if you interest about details or skip if you don't. First we talk about secrets saving. If the tool can't find some secrets in environment variables, it will ask you to input secrets through terminal, then save all secrets into an encrypted file (named as <secrets_file> ), sort of like put them into a chest and lock the chest. No one can figure out the secret values even they can read the <secrets_file> , there are just meaningless ciphertext, no plain text. Stay in simple, for encrypting that <secrets_file> , we'll need a private key (another secret value), the tool will automatically generate one for you. This private key (with the public key it generates) can act as both \"key\" and \"lock\" of the <secrets_file> \"chest\". We can't remember, and it's inconvenient to re-input this long value, so we need to save this value down to a file, or we'll lose it after reboot the computer like your poor office files, so here is the second file - <private_key_file> . It may disappoint you but, for saving the private key into the <private_key_file> we need another password (passphrase) to protect the dumped value, this time it's short and human-readable just like other normal passwords, it's created and inputted by you, and you should remember it for future use. Make sense? Loading secrets when restart the tool afterwards is in plain reversed order. You enter the password (through terminal), the tool load the private key, use the private key load secrets, done. For more security concern, read this paragraph . Setting Secrets Via Other Methods For Automation # The tool's \"require-input-password-to-decrypt-secrets\" interaction behavior will block the program. So here are some other ways to set secrets for integrating this tool into automating process. You'll provide plain text format secret values with these methods, so we'd like to remind you to keep secrets safe from bad guys. Four secrets in total: ak , aks , at , ats , you must provide both four secrets or the tool will still ask you for remains. You can provide ak , aks and at , ats via different approach if you want. You can indicate a file path with --secrets_file command line argument when starting the tool, in which contains secrets configured like other normal configuration options. (You can even directly write these secrets in you plan file and the tool still can load them, but that's dangerous and not recommended.) You can set environment variables for them. You can pass your private key file's password through stdin , the tool will read the password from stdin instead of ask password interactively when the read_password_from_stdin tool setting is set to true .","title":"Tool Configuration"},{"location":"configuration/tool-configuration/#tool-configuration","text":"This page is describing configurations of the tool itself. For all available plan configurations, please check the plan configuration documentation page . There are two types of tool configuration: most of them can be configured in global configuration file or set via environment variable, but some special configurations can only be passed through command line argument. The tool is using the Dynaconf as the configuration parsing library.","title":"Tool Configuration"},{"location":"configuration/tool-configuration/#loading-priority-precedence","text":"The tool will choose the tool configurations in the following order: Command line arguments & Environment variables[ ref ]. User written plan configuration files. Global settings file and secrets file. Default values set inside program.","title":"Loading Priority (Precedence)"},{"location":"configuration/tool-configuration/#setting-via-configuration-file","text":"You can use different supported formats like .yaml, .toml, .ini, .json. In this page we'll use yaml format. The name of one setting option is also the key in configuration file, and you can set an environment variable for it. Name Default Description log_level info Log level of the log file and stderr log_rotation 100MB Change log files writing method (when to split a new file) block_following false Whether to block users that you're following block_follower true Whether to block users that following you read_password_from_stdin false Instead of ask user input the password (for loading private key file) through terminal You can search how particular configuration is used in source code if you are interested.","title":"Setting Via Configuration File"},{"location":"configuration/tool-configuration/#setting-via-environment-variable","text":"You can set the tool configurations via setting environment variables , with the prefix BULLET_ followed by upper case of the name, in which you can build automated processes. This is quite useful and simple when setting up secrets. 1 2 3 4 5 # setting in configuration file (yaml) caliber: 20 ga. # variable in environment (unix-like os style) export BULLET_CALIBER=\"20 ga.\"","title":"Setting Via Environment Variable"},{"location":"configuration/tool-configuration/#setting-via-command-line-argument","text":"There are some \"one-off\" configurations (value may be different in each execution, so not suitable for the global scope). The tool will use --secrets_file and --private_key_file to manage secrets in a safe way, here is more detailed introduction. Argument Default Description --config_path <home directory> /.puntgun Path of various configuration files the tool needs --plan_file <config path> /plan.yml Plan configuration file you'd like to execute --settings_file <config path> /settings.yml Global tool settings that will apply to every execution --private_key_file <config path> /.puntgun_rsa4096 Tool generated password protected private key --secrets_file <config path> /.secrets.yml Tool generated ciphertext or user written plain text file contains secrets --report_file <config path> /reports/ <plan_file> _ <time> _report.json Expect path of the tool generated execution report","title":"Setting Via Command Line Argument"},{"location":"configuration/tool-configuration/#secrets","text":"Secrets are strings that need to be kept well, and you should treat them as you would your Twitter account's password. Anyone who has them can manipulate your Twitter account at will just like they have your password. We need four (two pairs of) secrets to make the tool work: A pair of Twitter Developer API usage credential for querying Twitter APIs, configuration name: ak & aks , stands for A pi K ey secrets pair key and key S ecrets. We'll get them from Twitter Dev Platform . An access token pair that indicate your consent for API key above to operate your account, configuration name: at & ats , stands for A ccess T oken pair key and key S ecrets. We can't get them until first run the tool.","title":"Secrets"},{"location":"configuration/tool-configuration/#registering-a-twitter-api-credential","text":"When the tool is first launched there is an interactive guide procedure instructing you on how to register and save your credentials. If you want to register one right away, keep reading, if not, skip this paragraph. For registering a credential, first you need a Twitter account (you already have one I guess), and you need to bind a phone number with that account. You can do unbind after get the credential, and the credential will remain valid. But Twitter already saved a new line of record about your phone inside the user table, now it's up to you whether you want to continue or not. Follow the instruction below: Register the credential (\"register an app\" Twitter says so) on developer.twitter.com . Turn on \"OAuth 1.0a\" in your App settings: Set the App permissions to \"Read and write\". Set the callback, website URL to \"https://twitter.com\" for passing the website's validation check. (We'll use the pin-based auth method , so we needn't really deploy a server for receiving Twitter's callback.) All set, now you can directly paste them into the tool. You must run the tool at least once to authorize this tool with your Twitter account to get access token pair, then you can dump secrets and set all these four secrets for automatically running the tool.","title":"Registering A Twitter API Credential"},{"location":"configuration/tool-configuration/#let-the-tool-manages-secrets","text":"The tool will help you manage secrets by default, and interactive with you via terminal (command line interface) while running to operate them. In short, you create a new password and keep it, the password protects the <private_key_file> , the private key protects four secret values in <secrets_file> . You keep the password, let the tool arrange rest things for you. Keep reading if you interest about details or skip if you don't. First we talk about secrets saving. If the tool can't find some secrets in environment variables, it will ask you to input secrets through terminal, then save all secrets into an encrypted file (named as <secrets_file> ), sort of like put them into a chest and lock the chest. No one can figure out the secret values even they can read the <secrets_file> , there are just meaningless ciphertext, no plain text. Stay in simple, for encrypting that <secrets_file> , we'll need a private key (another secret value), the tool will automatically generate one for you. This private key (with the public key it generates) can act as both \"key\" and \"lock\" of the <secrets_file> \"chest\". We can't remember, and it's inconvenient to re-input this long value, so we need to save this value down to a file, or we'll lose it after reboot the computer like your poor office files, so here is the second file - <private_key_file> . It may disappoint you but, for saving the private key into the <private_key_file> we need another password (passphrase) to protect the dumped value, this time it's short and human-readable just like other normal passwords, it's created and inputted by you, and you should remember it for future use. Make sense? Loading secrets when restart the tool afterwards is in plain reversed order. You enter the password (through terminal), the tool load the private key, use the private key load secrets, done. For more security concern, read this paragraph .","title":"Let The Tool Manages Secrets"},{"location":"configuration/tool-configuration/#setting-secrets-via-other-methods-for-automation","text":"The tool's \"require-input-password-to-decrypt-secrets\" interaction behavior will block the program. So here are some other ways to set secrets for integrating this tool into automating process. You'll provide plain text format secret values with these methods, so we'd like to remind you to keep secrets safe from bad guys. Four secrets in total: ak , aks , at , ats , you must provide both four secrets or the tool will still ask you for remains. You can provide ak , aks and at , ats via different approach if you want. You can indicate a file path with --secrets_file command line argument when starting the tool, in which contains secrets configured like other normal configuration options. (You can even directly write these secrets in you plan file and the tool still can load them, but that's dangerous and not recommended.) You can set environment variables for them. You can pass your private key file's password through stdin , the tool will read the password from stdin instead of ask password interactively when the read_password_from_stdin tool setting is set to true .","title":"Setting Secrets Via Other Methods For Automation"},{"location":"development/contributing/","text":"Contributing to the puntgun # Thank you for considering making this tool better. You'll need a GitHub account to participate in contributing, which can be an obstacle, and I apologize for that. You can also email me (I generally check email once a week), but it is difficult for me personally to reply to everyone appropriately, so please consider this as a backup option only. There is no strict limit to how and what you can contribute, here are a few ways we can think of. Programming aspect # Improving unsatisfied code: There are some unsatisfactory pieces of logic in the code, they work, but they deserve to be better. You can find them by searching for IMPROVE marks in the code. Join the discussion about or deal with unclosed issues . Develop new features to this tool (and we recommend developing in the steps described below ). Improve CI/CD process. Add more test cases. For local development, please read this part . For security and vulnerability reports, please read this documentation . Non-programming aspect # Improving documentation : Make documentation easier to understand by changing expressions. Fixing syntax and typo errors in documentation. Add more necessary details for the user to know the specific behavior of the tool without having to read the code. Join the community on the GitHub: Help others by answering questions . Request or vote new features (the more details the better!). Share good plan configuration and automation usage. Recommended contributing approaches # Tell us what you intend to do before finishing it # When you decide to make programming aspect contributions, we expect you to indicate in the corresponding issue or new issue that you intend to do this and how you intend to implement it, like this article . Industry experience tells us that shift-left checks and discussions is good for software development, for example we can provide more relevant knowledge, project details and advice to help you do things better when we know what you want to do. Of course there is no mandatory requirement (compliments of the freewheeling open source community !), the code for this project is open source under the MIT license , and you do not need to get anyone's permission to make changes to (your fork of) this project, you just need to make it work for your personal needs . If you feel that your changes will also benefit the upstream, you can submit a Pull Request to the upstream, and only then does the \"contribution\" begin. PR should pass lint checks # Remember to run pdm run lint and make sure all checks pass before creating Pull Request, the CI will fail if any lint tool complains. Prepare for local development # If you are not familiar with how to clone a project and submit a pull request using GitHub, please read this documentation from GitHub official . This project requires Python version 3.10 , please download a new one or upgrade your existing Python's version. (Sorry to be abrupt, but... pipx is an excellent tool for managing executable python libraries, you may want to use it instead of pip for installing pypi-based executable tools. Almost all tools used in the project can be happily installed in this convenient way, though they will be well cared by other managing tools, so you need not manually install them while you using scripts. If you install them with pipx in addition to venv and PDM , you can use them anywhere, that is convenient.) This project uses the PDM as package managing tool, if you are not skilled enough to use other package management tools to be compatible with the PDM configuration (scripts defined in pyproject.toml , etc.), install the PDM . PDM will detect and reuses the virtualenv python environment under the project directory, so you can write code with your PDM-not-supported IDEs (PyCharm for example) in virtualenv style, while using PDM truly managing everything via terminal. Now simply install all dependencies with pdm install . All set, now you can play with the code or get your hands dirty to make things happen. Scripts and tools for development # All development scripts are defined under [tool.pdm.scripts] section in pyproject.toml . Run tests # 1 pdm run test This project uses pytest as the unit testing framework, which will be installed with development dependencies. Test cases are written under ./tests directory with test_ prefix. 1 pdm run coverage This script will run the test suite with pytest while generating a html format coverage report with coverage.py . Linting # Warning Running this script will actually change the code , make sure commit your code before running. 1 pdm run lint This project uses pre-commit for linting , it will help us to manage other linting tools. Check .pre-commit-config.yaml under root directory to see pre-commit hooks configuration. Currently, this project uses: black for code style automatic formatting. isort for import statements sorting. codespell for typo checking. flake8 for common Python programming problem checking. mypy for static type hint scanning. Render the documentation website # 1 pdm run doc This project uses MkDocs as documentation website framework, with Material for MkDocs as website theme. They will also be installed with development dependencies. Documentation source is written in Markdown format, under ./docs directory.","title":"Contributing"},{"location":"development/contributing/#contributing-to-the-puntgun","text":"Thank you for considering making this tool better. You'll need a GitHub account to participate in contributing, which can be an obstacle, and I apologize for that. You can also email me (I generally check email once a week), but it is difficult for me personally to reply to everyone appropriately, so please consider this as a backup option only. There is no strict limit to how and what you can contribute, here are a few ways we can think of.","title":"Contributing to the puntgun"},{"location":"development/contributing/#programming-aspect","text":"Improving unsatisfied code: There are some unsatisfactory pieces of logic in the code, they work, but they deserve to be better. You can find them by searching for IMPROVE marks in the code. Join the discussion about or deal with unclosed issues . Develop new features to this tool (and we recommend developing in the steps described below ). Improve CI/CD process. Add more test cases. For local development, please read this part . For security and vulnerability reports, please read this documentation .","title":"Programming aspect"},{"location":"development/contributing/#non-programming-aspect","text":"Improving documentation : Make documentation easier to understand by changing expressions. Fixing syntax and typo errors in documentation. Add more necessary details for the user to know the specific behavior of the tool without having to read the code. Join the community on the GitHub: Help others by answering questions . Request or vote new features (the more details the better!). Share good plan configuration and automation usage.","title":"Non-programming aspect"},{"location":"development/contributing/#recommended-contributing-approaches","text":"","title":"Recommended contributing approaches"},{"location":"development/contributing/#tell-us-what-you-intend-to-do-before-finishing-it","text":"When you decide to make programming aspect contributions, we expect you to indicate in the corresponding issue or new issue that you intend to do this and how you intend to implement it, like this article . Industry experience tells us that shift-left checks and discussions is good for software development, for example we can provide more relevant knowledge, project details and advice to help you do things better when we know what you want to do. Of course there is no mandatory requirement (compliments of the freewheeling open source community !), the code for this project is open source under the MIT license , and you do not need to get anyone's permission to make changes to (your fork of) this project, you just need to make it work for your personal needs . If you feel that your changes will also benefit the upstream, you can submit a Pull Request to the upstream, and only then does the \"contribution\" begin.","title":"Tell us what you intend to do before finishing it"},{"location":"development/contributing/#pr-should-pass-lint-checks","text":"Remember to run pdm run lint and make sure all checks pass before creating Pull Request, the CI will fail if any lint tool complains.","title":"PR should pass lint checks"},{"location":"development/contributing/#prepare-for-local-development","text":"If you are not familiar with how to clone a project and submit a pull request using GitHub, please read this documentation from GitHub official . This project requires Python version 3.10 , please download a new one or upgrade your existing Python's version. (Sorry to be abrupt, but... pipx is an excellent tool for managing executable python libraries, you may want to use it instead of pip for installing pypi-based executable tools. Almost all tools used in the project can be happily installed in this convenient way, though they will be well cared by other managing tools, so you need not manually install them while you using scripts. If you install them with pipx in addition to venv and PDM , you can use them anywhere, that is convenient.) This project uses the PDM as package managing tool, if you are not skilled enough to use other package management tools to be compatible with the PDM configuration (scripts defined in pyproject.toml , etc.), install the PDM . PDM will detect and reuses the virtualenv python environment under the project directory, so you can write code with your PDM-not-supported IDEs (PyCharm for example) in virtualenv style, while using PDM truly managing everything via terminal. Now simply install all dependencies with pdm install . All set, now you can play with the code or get your hands dirty to make things happen.","title":"Prepare for local development"},{"location":"development/contributing/#scripts-and-tools-for-development","text":"All development scripts are defined under [tool.pdm.scripts] section in pyproject.toml .","title":"Scripts and tools for development"},{"location":"development/contributing/#run-tests","text":"1 pdm run test This project uses pytest as the unit testing framework, which will be installed with development dependencies. Test cases are written under ./tests directory with test_ prefix. 1 pdm run coverage This script will run the test suite with pytest while generating a html format coverage report with coverage.py .","title":"Run tests"},{"location":"development/contributing/#linting","text":"Warning Running this script will actually change the code , make sure commit your code before running. 1 pdm run lint This project uses pre-commit for linting , it will help us to manage other linting tools. Check .pre-commit-config.yaml under root directory to see pre-commit hooks configuration. Currently, this project uses: black for code style automatic formatting. isort for import statements sorting. codespell for typo checking. flake8 for common Python programming problem checking. mypy for static type hint scanning.","title":"Linting"},{"location":"development/contributing/#render-the-documentation-website","text":"1 pdm run doc This project uses MkDocs as documentation website framework, with Material for MkDocs as website theme. They will also be installed with development dependencies. Documentation source is written in Markdown format, under ./docs directory.","title":"Render the documentation website"},{"location":"development/security-policy/","text":"Security Policy # This page is used to show which versions of the tool are affected by which vulnerabilities. There are currently no vulnerabilities present. It is recommended to update this tool to the latest version each time you run it (it is much easier to update with the help of pipx ). Reporting a Vulnerability # Please submit vulnerability or abuse reports via issues . Responses and fixes for such issues will be prioritized over any other issues. If the submitter determines that the problem is serious and should not directly disclose the specifics in public, please email the specifics to current maintainer and create an issue without the specifics (I generally check my emails once a week, but the creation of an issue can be notified immediately). We apologize that we cannot give an exact expected fix time.","title":"Security policy"},{"location":"development/security-policy/#security-policy","text":"This page is used to show which versions of the tool are affected by which vulnerabilities. There are currently no vulnerabilities present. It is recommended to update this tool to the latest version each time you run it (it is much easier to update with the help of pipx ).","title":"Security Policy"},{"location":"development/security-policy/#reporting-a-vulnerability","text":"Please submit vulnerability or abuse reports via issues . Responses and fixes for such issues will be prioritized over any other issues. If the submitter determines that the problem is serious and should not directly disclose the specifics in public, please email the specifics to current maintainer and create an issue without the specifics (I generally check my emails once a week, but the creation of an issue can be notified immediately). We apologize that we cannot give an exact expected fix time.","title":"Reporting a Vulnerability"}]}