import os.path
import shutil
from pathlib import Path

from loguru import logger

import runner
from conf import config, example
from conf.encrypto import load_or_generate_private_key
from conf.secret import load_or_request_all_secrets


class Gen(object):
    """Generate various files from the tool."""

    @staticmethod
    def secrets(secrets_file=str(config.secrets_file),
                # this path will only be used here, so we needn't add it to config module.
                output_file=str(config.config_path.joinpath('.secrets_plaintext.yml'))):
        """
        Extract secrets from secrets file and save them in plaintext format.

        :param secrets_file: File generated by the tool once you have started it before.
        :param output_file: In which you want to save plaintext secrets
        """

        config.reload_important_files(secrets_file=secrets_file)
        secrets = load_or_request_all_secrets(load_or_generate_private_key())

        output_file = Path(output_file)
        backup_if_exists(output_file)
        with open(output_file, 'w', encoding='utf-8') as f:
            f.writelines(f'{key}: {value}\n' for key, value in secrets.items())

    @staticmethod
    def config(output_path=str(config.config_path)):
        """
        Generate example configuration files: tool setting file and plan configuration file.
        :param output_path: path to output directory.
        """

        example_settings_file = Path(output_path).joinpath('example-settings.yml')
        backup_if_exists(example_settings_file)
        with open(example_settings_file, 'w', encoding='utf-8') as f:
            f.write(example.tool_settings)

        example_plan_file = Path(output_path).joinpath('example-plan.yml')
        backup_if_exists(example_plan_file)
        with open(example_plan_file, 'w', encoding='utf-8') as f:
            f.write(example.plan_config)

        logger.bind(o=True).info(f"""
Example configuration files generated:
settings: {example_settings_file}
plan: {example_plan_file}
""")


def backup_if_exists(path: Path):
    if path.exists():
        logger.warning("Indicated output file [{}] already exists, back up the origin file", path)
        shutil.copy2(path, path.with_suffix(os.path.splitext(path)[1] + '.bak'))


class Check(object):
    """Validate things like configuration files, check configuration syntax etc."""

    @staticmethod
    def plan(plan_file=str(config.plan_file)):
        """
        Validate plan configuration file's syntax.
        :param plan_file: Plan configuration file you'd like to check.
        """
        config.reload_important_files(plan_file=plan_file)
        runner.parse_plans()


class Command(object):
    gen = Gen()
    check = Check()

    @staticmethod
    def fire(config_path=str(config.config_path),
             plan_file=str(config.plan_file),
             settings_file=str(config.settings_file),
             private_key_file=str(config.pri_key_file),
             secrets_file=str(config.secrets_file),
             report_file=str(config.report_file)):
        """
        Start processing base on given configuration files.
        :param config_path: Path of various configuration files the tool needs.
        :param plan_file: Plan configuration file you'd like to execute.
        :param settings_file: Global tool settings that will apply to every execution.
        :param private_key_file: Tool generated password protected private key.
        :param secrets_file: Tool generated cipher text file or
               user writen plain text file contains secrets.
        :param report_file: Expect path of the tool generated execution report.
        """
        logger.info("Run command [fire]")
        config.reload_important_files(config_path=config_path,
                                      plan_file=plan_file,
                                      settings_file=settings_file,
                                      pri_key_file=private_key_file,
                                      secrets_file=secrets_file,
                                      report_file=report_file)
        config.config_log_file()
        runner.start()
