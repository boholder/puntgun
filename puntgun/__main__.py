import click

from puntgun import commands
from puntgun.conf import config as cfg

CONTEXT_SETTINGS = dict(help_option_names=["-h", "--help"])


@click.group(context_settings=CONTEXT_SETTINGS)
@click.version_option(version=cfg.tool_version)
def cli() -> None:
    """\b
         ____              _      ____
    ,___|____\\____________|_|____/____|____________________
    |___|_|_)_|_|_|_|_'__\\|___|_|_|___|_|_|_|_'__\\__[____]  ""-,___..--=====
        |  __/| |_| | | | | |_  | |_| | |_| | | | |   \\_____/   ""         |
        |_|    \\__,_|_| |_|\\__|  \\____|\\__,_|_| |_|      [ ))"---------..__|

    \b
    puntgun - a configurable automation command line tool for Twitter
    > https://boholder.github.io/puntgun/dev/"""


@click.command(context_settings=CONTEXT_SETTINGS)
@click.option(
    "-p",
    cfg.CommandArg.PLAN_FILE.to_arg(),
    default=cfg.CommandArg.PLAN_FILE.value,
    show_default=True,
    help="Plan configuration file to execute.",
)
@click.option(
    "-r",
    cfg.CommandArg.REPORT_FILE.to_arg(),
    default=cfg.CommandArg.REPORT_FILE.value,
    show_default=True,
    help="File path of the execution report generated by the tool.",
)
@click.option(
    cfg.CommandArg.SETTINGS_FILE.to_arg(),
    default=cfg.CommandArg.SETTINGS_FILE.value,
    show_default=True,
    help="Tool settings file that control tool behaviors.",
)
@click.option(
    cfg.CommandArg.CONFIG_PATH.to_arg(),
    default=cfg.CommandArg.CONFIG_PATH.value,
    show_default=True,
    help="Change the base path of all files only in this execution.",
)
@click.option(
    cfg.CommandArg.SECRETS_FILE.to_arg(),
    default=cfg.CommandArg.SECRETS_FILE.value,
    show_default=True,
    help="Ciphertext or plaintext file that contains required secrets, "
    "ciphertext secrets file should be paired with the correct private key file "
    "which was used to encrypt it before.",
)
@click.option(
    cfg.CommandArg.PRIVATE_KEY_FILE.to_arg(),
    default=cfg.CommandArg.PRIVATE_KEY_FILE.value,
    show_default=True,
    help="Password protected private key file generated by the tool previously.",
)
def fire(**kwargs: str) -> None:
    """Start the tool with plans."""
    commands.fire(cfg.CommandArg.arg_dict_to_enum_dict(**kwargs))


@click.group(context_settings=CONTEXT_SETTINGS)
def gen() -> None:
    """
    Generate various files from the tool.
    """
    pass


@gen.command(context_settings=CONTEXT_SETTINGS)
@click.option(
    cfg.CommandArg.PRIVATE_KEY_FILE.to_arg(),
    default=cfg.CommandArg.PRIVATE_KEY_FILE.value,
    show_default=True,
    help="Password protected private key file which will be used to encrypt the secrets file.",
)
@click.option(
    cfg.CommandArg.SECRETS_FILE.to_arg(),
    default=cfg.CommandArg.SECRETS_FILE.value,
    show_default=True,
    help="Ciphertext file that will contain encrypted secrets.",
)
def secrets(**kwargs: str) -> None:
    """
    Let the tool guides you to register and configurate necessary secrets,
    and safely keeps them into secrets file for future use.
    """
    commands.Gen.secrets(cfg.CommandArg.arg_dict_to_enum_dict(**kwargs))


@gen.command(context_settings=CONTEXT_SETTINGS)
@click.option(
    cfg.CommandArg.PRIVATE_KEY_FILE.to_arg(),
    default=cfg.CommandArg.PRIVATE_KEY_FILE.value,
    show_default=True,
    help="Original private key file which generated the secrets file.",
)
@click.option(
    cfg.CommandArg.SECRETS_FILE.to_arg(),
    default=cfg.CommandArg.SECRETS_FILE.value,
    show_default=True,
    help="Original secrets file.",
)
def new_password(**kwargs: str) -> None:
    """
    Change a new password, will re-generate private key file and secrets file.
    """
    commands.Gen.new_password(cfg.CommandArg.arg_dict_to_enum_dict(**kwargs))


@gen.command(context_settings=CONTEXT_SETTINGS)
@click.option(
    "-o",
    "--output",
    default=str(cfg.config_path.joinpath(".secrets_plaintext.yml")),
    show_default=True,
    help="Path of the dumped plaintext secrets.",
)
@click.option(
    cfg.CommandArg.PRIVATE_KEY_FILE.to_arg(),
    default=cfg.CommandArg.PRIVATE_KEY_FILE.value,
    show_default=True,
    help="Password protected private key file which was used to encrypt the secrets file.",
)
@click.option(
    cfg.CommandArg.SECRETS_FILE.to_arg(),
    default=cfg.CommandArg.SECRETS_FILE.value,
    show_default=True,
    help="Ciphertext file which contains encrypted secrets.",
)
def plaintext_secrets(output: str, **kwargs: str) -> None:
    """
    Extract secrets from present secrets file and save them into a file in plaintext format.
    Please protect the generated file as carefully as ou would a password.
    """
    commands.Gen.plain_secrets(output, cfg.CommandArg.arg_dict_to_enum_dict(**kwargs))


@gen.command(context_settings=CONTEXT_SETTINGS)
@click.option(
    "-o", "--output-path", default=cfg.CommandArg.CONFIG_PATH.value, show_default=True, help="Path of generated files."
)
def example(output_path: str) -> None:
    """Generate example configuration files."""
    commands.Gen.config(output_path)


@click.group(context_settings=CONTEXT_SETTINGS)
def check() -> None:
    """Validate things such as configuration files syntax."""
    pass


@check.command(context_settings=CONTEXT_SETTINGS)
@click.option(
    "-p",
    cfg.CommandArg.PLAN_FILE.to_arg(),
    default=cfg.CommandArg.PLAN_FILE.value,
    show_default=True,
    help="Plan configuration file to be checked.",
)
def plan(**kwargs: str) -> None:
    """Validate syntax of plan configuration file."""
    commands.Check.plan(cfg.CommandArg.arg_dict_to_enum_dict(**kwargs))


cli.add_command(fire)
cli.add_command(gen)
cli.add_command(check)

if __name__ == "__main__":
    cli()
