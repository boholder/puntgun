import click

from puntgun import command
from puntgun import conf
from puntgun.conf import config

CONTEXT_SETTINGS = dict(help_option_names=['-h', '--help'])


@click.group(context_settings=CONTEXT_SETTINGS)
@click.version_option(version=config.tool_version)
def cli():
    """\b
     ____              _      ____
,___|____\____________|_|____/____|____________________
|___|_|_)_|_|_|_|_'__\|___|_|_|___|_|_|_|_'__\__[____]  ""-,___..--=====
    |  __/| |_| | | | | |_  | |_| | |_| | | | |   \\_____/   ""         |
    |_|    \__,_|_| |_|\__|  \____|\__,_|_| |_|      [ ))"---------..__|

\b
puntgun - a configurable automation command line tool for Twitter
> https://github.com/boholder/puntgun/"""


@click.command(context_settings=CONTEXT_SETTINGS)
@click.option('-p', '--plan', '_plan', default=str(config.plan_file), show_default=True,
              help='Plan configuration file to execute.')
@click.option('-r', '--report', default=str(config.report_file), show_default=True,
              help='File path of the execution report generated by the tool.')
@click.option('--settings', default=str(config.settings_file), show_default=True,
              help='Tool settings file that control tool behaviors.')
@click.option('--config-path', default=str(config.config_path), show_default=True,
              help='Change the base path of all files only in this execution.')
@click.option('--secrets', '_secrets', default=str(config.secrets_file), show_default=True,
              help='Ciphertext or plaintext file that contains required secrets, '
                   'ciphertext secrets file should be paired with the correct private key file '
                   'which was used to encrypt it before.')
@click.option('--private-key', default=str(config.pri_key_file), show_default=True,
              help='Password protected private key file generated by the tool previously.')
def fire(_plan, report, settings, config_path, _secrets, private_key):
    """Start the tool with plans."""
    command.fire(_plan, report, settings, config_path, _secrets, private_key)


@click.group(context_settings=CONTEXT_SETTINGS)
def gen():
    """Generate various files from the tool."""
    pass


@gen.command(context_settings=CONTEXT_SETTINGS)
@click.option('--private-key', default=str(config.pri_key_file), show_default=True,
              help='Password protected private key file which will be used to encrypt the secrets file.')
@click.option('--secrets', '_secrets', default=str(config.secrets_file), show_default=True,
              help='Ciphertext file that will contain encrypted secrets.')
def secrets(private_key, _secrets):
    """
    Let the tool guides you to register and configurate necessary secrets,
    and safely keeps them into secrets file for future use.
    """
    command.Gen.secrets(private_key_file=private_key, secrets_file=_secrets)


@gen.command(context_settings=CONTEXT_SETTINGS)
@click.option('-o', '--output', default=str(config.config_path.joinpath('.secrets_plaintext.yml')), show_default=True,
              help='Path of the dumped plaintext secrets.')
@click.option('--private-key', default=str(config.pri_key_file), show_default=True,
              help='Password protected private key file which was used to encrypt the secrets file.')
@click.option('--secrets', '_secrets', default=str(config.secrets_file), show_default=True,
              help='Ciphertext file which contains encrypted secrets.')
def plaintext_secrets(output, private_key, _secrets):
    """
    Extract secrets from present secrets file and save them into a file in plaintext format.
    Please protect the generated file as carefully as ou would a password.
    """
    command.Gen.plain_secrets(output, private_key, _secrets)


@gen.command(context_settings=CONTEXT_SETTINGS)
@click.option('-o', '--output-path', default=str(config.config_path), show_default=True,
              help='Path of generated files.')
def config(output_path):
    """Generate example configuration files."""
    command.Gen.config(output_path)


@click.group(context_settings=CONTEXT_SETTINGS)
def check():
    """Validate things such as configuration files syntax."""
    pass


@check.command(context_settings=CONTEXT_SETTINGS)
@click.option('-p', '--plan', '_plan', default=str(conf.config.plan_file), show_default=True,
              help='Plan configuration file to be checked.')
def plan(_plan):
    """Validate syntax of plan configuration file."""
    command.Check.plan(_plan)


cli.add_command(fire)
cli.add_command(gen)
cli.add_command(check)

if __name__ == '__main__':
    cli()
